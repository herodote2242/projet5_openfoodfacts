#!/usr/bin/env python3
# -*- coding: Utf-8 -*

import requests
import records
from pprint import pprint
import creadb
import re
import utilities

class DatabaseFeeder:
    """ This class will integrate the results of the feed_db function into the
    different tables created in the database : product, category, store."""

    def __init__(self, connection):
        self.db = connection
        self.data = None

    def fetch_data(self):
        """This functions collects data from the Open Food Facts API
        according to the criteria"""
        for tag in utilities.tags:
            url="https://fr.openfoodfacts.org/cgi/search.pl"
            criteria={
                "action":"process",
                "tagtype_0":"categories",
                "tag_contains_0":"contains",
                "tag_0":tag,
                "tagtype_1":"nutrition_grades",
                "tag_contains_1":"contains",
                "tag_1":"",
                "sort_by":"product_name",
                "page_size":10,
                "json":1
            }
            req=requests.get(url, params = criteria)
            # Activate the line below to show all the research in the shell.
            #pprint(req.json())
            # Activate the line below to show the url generated by the search.
            #print(req.url)
            self.data = req.json()

    def use_database(self):
        """The function only exists to point to the right database"""
        self.db.query("""USE projet5;""")

    def clean_tables(self):
        self.db.query("""DELETE FROM product_category;""")
        self.db.query("""DELETE FROM product_store;""")       
        self.db.query("""DELETE FROM product;""")
        self.db.query("""DELETE FROM category;""")
        self.db.query("""DELETE FROM store;""")

    def product_invalid(self, product):
        """..."""
        keys = ("code", "product_name", "brand", "stores", "categories", "url_link", "nutrition_grade_fr")
        for key in keys:
            if key not in self.data or not self.data[key]:
                return True
        return False

    def feed_products(self):
        """The function is responsible of feeding the table "product" with the API's results"""
        products = self.data["products"]
        for product in products:
            if self.product_invalid(products) == False:
                continue
            self.db.query("""INSERT INTO product (code, product_name, brand, url_link,
                nutrition_grade_fr) VALUES (:code, :product_name, :brand, :url_link,
                :nutrition_grade_fr);""", code = int(product["code"]), product_name = product["product_name"], 
                brand = product["brands"], url_link = product["url"],
                nutrition_grade_fr = product["nutrition_grade_fr"])
            self.feed_categories(product)
            self.feed_stores(product)

    # -tc- la méthode clean_categories() n'existe plus?
    def feed_categories(self, product, utilities):
        """The function is responsible of feeding the table "category" with the API's results"""
        categories = self.clean_categories(product["categories"])
        for category in categories:
            self.db.query("""INSERT INTO category (name)
                VALUES (:name) ON DUPLICATE KEY UPDATE name = :name;""",
                name = product["categories"])
            self.feed_product_category(product, category)
    
    # -tc- la mèthode clean_stores() n'existe plus
    def feed_stores(self, product):
        """The function feeds the table "stores" with the API's results"""
        stores = self.clean_stores(product["stores"])
        for store in stores:
            self.db.query("""INSERT INTO store (name) VALUES (:name)
                ON DUPLICATE KEY UPDATE name = :name;""",
                name = product["stores"])
            self.feed_product_store(product, store)
    
    # -tc- exemple
    def feed_product_store(self, product, store):
        """Feeds the table product_store according to the data in product and store tables"""
        self.db.query("""INSERT INTO product_store (product_code, store_id)
            VALUES (:code, (SELECT id FROM category WHERE name = :store));""",
            code=product['code'], name=store)

    def feed_product_category(self, product, category):
        """Feeds the table product_category according to the data in product and category tables"""
        self.db.query("""INSERT INTO product_category (category_id, product_code)
            FROM (SELECT code FROM product AND SELECT id FROM category);""",
            category_id = category.id, product_code = product.code)


#Tests:
if __name__=="__main__":
    connection = records.Database("mysql+pymysql://root:root@localhost/?charset=utf8mb4")
    feeder = DatabaseFeeder(connection)
    feeder.fetch_data()
    feeder.use_database()
    feeder.clean_tables()
    feeder.feed_products()
